!pip install sequential
!pip install --upgrade pandas
!pip install --upgrade pandas-datareader
!pip install --upgrade yfinance

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
Yahoo_finance_Company_Quoto = "GOOG" #@param ["AAPL", "SBIN.NS", "TCS.NS", "TTM", "MSFT", "AMZN", "TSLA", "NFLX", "META", "GOOG", "NVDA"] {allow-input: true}

import yfinance as yf
from datetime import date
from datetime import timedelta
Today_date = date.today()
start_date = '2010-01-01' #@param{type:"date"}
end_date = "2024-02-08" #@param{type:"date"}

from keras.backend import transpose
#Get stock quote
df = yf.download(Yahoo_finance_Company_Quoto,  start= start_date , end= end_date)
#show the data
print("The historical data of ", Yahoo_finance_Company_Quoto, "is ......")
print(df)

#graphical representation of historical data 
df.shape
print("The Graphical representation of the historical data is .....")
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Year', fontsize=18)
plt.ylabel('Close Price USD ($)',fontsize = 18)
plt.show()

#create a new data
data = df.filter(['Close'])
dataset = data.values
training_data_len = math.ceil(len(dataset)* .8)

#Scale the data
scaler = MinMaxScaler(feature_range = (0,1))
scaled_data = scaler.fit_transform(dataset)

from os import X_OK
train_data = scaled_data[0:training_data_len, :]

x_train = []
y_train = []

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i,0])

 #Convert x_train and Y_train to numpy arrays
x_train , y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

#Build the LSTM model
model = Sequential()
model.add(LSTM(50,return_sequences=True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer = 'adam', loss = 'mean_squared_error')
model.fit(x_train, y_train, batch_size=1, epochs=2)

#Create the testing data set
test_data = scaled_data[training_data_len - 60: , :]
x_test = []
y_test = dataset[training_data_len : , : ]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#Convert the data in numpy array
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
print("The model is trained.")

#prediction is trained 
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)
print("the model prediction is trained.")
rmse = np.sqrt(np.mean(predictions - y_test)**2)
print("The Root mean square value(RMSE) is : " )
rmse

#plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions']=predictions

plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD ($)', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

#Predicton of alredy existing data
print(valid)
apple_quote = yf.download(Yahoo_finance_Company_Quoto,start='2012-01-01', end = end_date)
Price_type = "High" #@param['Open','Close','High','Low','Adj Close','Volume']
new_df = apple_quote.filter([Price_type])
last_60_days = new_df[-60:].values
last_60_days_scaled = scaler.transform(last_60_days)
X_test = []
X_test.append(last_60_days_scaled)
X_test = np.array(X_test)
X_test = np.reshape(X_test,(X_test.shape[0], X_test.shape[1], 1))
pred_price = model.predict(X_test)
pred_price = scaler.inverse_transform(pred_price)
print("\nThe highest Predcition of ",Price_type," price from the all above dates is ......")
print(pred_price)

# Todays Price prediction 
apple_quote2 = yf.download(Yahoo_finance_Company_Quoto,start=end_date, end = Today_date)
Price_type = "Close" #@param['Open','Close','High','Low','Adj Close','Volume']
print(apple_quote2[Price_type])
